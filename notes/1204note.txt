12장

바이너리 파일

문자로 표현되지 않는 바이너리 데이터가 기록된 파일
텍스트 파일의 각 바이트 -> 문자로 해석
바이너리 파일의 각 바이트 -> 문자로 해석되지 않는 것도 있음

파일 입출력 모드는

텍스트 I/O , 바이너리 I/O 두가지로 구분된다.

송: 파일 입출력을 통해서 텍스트 파일에 데이터를 저장하여 데이터를
관리할 수있겠다.

홍 : 그럼 사용자가 작성한 내용을 나중에 코드를 실행시켜 확인도 가능하겠네

파일 모드

다양한 파일 모드를 활용하여 원하는 방식으로 저장 및 출력을 할 수있다.

송: 이런식으로 파일에 저장 및 불러오기를 활용하면 C++ 뿐만아니라 다른
프로그램도 응용하여 활용할 수있겠어

홍: 맞아 메모장 및 프로그램들을 실행시켜 C++로 연동해 응용도 가능하겠는걸

송: 바이너리 I/O를 통해 사진을 가지고와서 편집도 가능하네 이러면
C++로 색감을 변경한다거나 다양하게 활용가능하겠어

임의 접근과 파일 포인터

순차 접근 읽은 다음 위치에서 읽고, 쓴 다음 위치에 쓰는 방식
임의 접근 파일 내의 임의의 위치로 옮겨 다니면서 읽고 쓸 수 있는 방식

송 : 파일에 내용중 원하는 위치로 포인터를 옮기면서 사용할 수있네

홍 : 이걸 활용하면 파일내용중 원하는 텍스트가 있는부분을 찾아 위치를 변경하여 삭제및
변경도 할 수 있겠네

송 : 뿐만아니라 파일에 크기도 알 수 있어서 정말 다양한 분야에서 응용가능하겠어

홍 : 나중에 C++를 활용하여 다른 프로그램이랑 연동시켜서 만들어보고 싶네

실행 오류와 오류 처리

송 : 평소에 수많은 코드중에 많은 오류들을 어떻게 처리할지 정말 궁금했었는데
C++ 앞으로 오류도 생각해서 코딩하는 버릇을 키워야겠어

홍: 맞아, 작은 오류 하나로 전체적인 프로그램이 오류가 날 수있으니까 오류처리는
정말 중요한 부분같아.
 