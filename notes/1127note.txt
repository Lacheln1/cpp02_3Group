C++ 스트림 종류
1. 입력 스트림 : 입력 장치, 네트웤, 파일로부터 데이터를 프로그램으로 전달하는 스트림
2. 출력 스트림 : 프로그램에서 출력되는 데이터를 출력 장치, 네트워크, 파일로 전달하는 스트림

C++ 입출력 스트림 버퍼
-C++ 입출력 스트림은 버퍼를 가짐
키 입력 스트림의 버퍼 : C++ 응용 프로그램은 사용자의 키 입력이 끝난 시점에서 읽음

스크린 출력 스트림 버퍼 > 버퍼가 꽉 차거나 강제 출력 명령 시에 출력 장치에 출력

C++ 표준은 스트림 입출력만 지원한다
입출력 방식은 2가지가 존재
1. 스트림 입출력 방식
-스트림 버퍼를 이용한 입출력 방식
-입력된 키는 버퍼에 저장 ( 엔터키가 입력되면 프로그램이 버퍼에서 읽어가는 방식)

2. 저 수준 입출력 방식
-키가 입력되는 즉시 프로그램에게 키 값 전달
(Backspace키 자체도 프로그램에게 바로 전달, 게임 등 키 입력이 즉각적으로 필요한 곳에 사용

스트림 입출력 방식의 장점 : 높은 호환성

ostream 멤버 함수
put(char ch) : ch의 문자를 스트림에 출력
write(char* str, int n) : str배열에 있는 n개의 문자를 스트림에 출력
flush() : 현재 스트림 버퍼에 있는 니용 강제 출력
get(char* s, int n) : 입력 스트림으로부터 n-1개의 문자를 읽어 배열 s에 저장하고 마지막에 '\0' 문자 삽입, 입력 도중 '\n'을 만나면 \0dmf tkqdlqgkrh flxjs
ex) chin.get(str,10) : 최대 9개의 문자를 읽고 끝에 \0을 붙여 str 배열에 저장

예제 11-3 *PP
홍 : while((ch = cin.get()) ! = EOF에서 EOF가 정확히 뭔지 알아?
송 : 찾아보니까 파일이 끝 또는 종료를 의미하고 프로그램 종료 또는 무한루프 탈출 조건으로 EOF를 쓰기도 한다고 해

홍: EOF 말고도 ignore(1)을 이용해서 무한루프에 빠지는걸 방지할 수 있나봐

조작자
-manipulator, 스트림 조작자

매개 변수 없는 조작자
ex) cout<<hex<<showbase<<30<<endl 

매개 변수 있는 조작자 : #include <iomanip> 필요
cout << setw(10) << setfill('^') << "Hello" << endl

삽입 연산자(<<) 
ex) cout << p; 를 위해서 필요한 코드
ostream& operator << (ostream& stream, Point a) {
stream <<"(" << a.x <<"," << a.y << ")";
return strea;
}
