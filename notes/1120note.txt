1. 제네릭 함수

송 : 제네틱 타입으로 함수의 중복을 줄일수 있게되었어

송: 그럼 앞으로 모든변수를 제네틱 타입이로 선언해버리면 안되는건가?

홍: 그러면 숫자가 들어가야 할때도 문자가들어가서 오히려 오류가 날 수있을거같아

송: 맞네 그런 부분도 주의하면서 사용하는게 좋겠어

2. 구체화 오류

홍 : 하지만 제네틱 타입으로 사용할때 서로다른 매개변수를 
사용할 수 없으니 주의해야해

송: 문자열을 비교해서 사용도 가능하네 이걸 통해서 사전처럼 글자 순서대로 
배열 하여 활용 할 수있겠어

홍: 서로 다른 타입의 매개변수를 제네릭함수에서 사용하려면
제네릭 클래스를 두개를 사용하여 활용하면 여러환경에서 응용가능하겠어

3. print() 템플릿 함수의 문제점 

송: 제네릭 클래스를 활용하여  char를 출력했을때 문자가 출력되는 문제를 방지하기
위해서 중복함수를 활용하여 방지할 수있어

홍: 제네릭 함수를 활용하려면 기존에 있던 방법을 이해하고있어야 가능하겠어

예제 10–6 

송 : 스택에 제네릭 함수를 활용하니 다양한 변수를 넣을 수있어서 다양한 분야에서 활용
가능하겠네

홍 : 확실히  int double 등 다양하게 스택에서 관리할 수있으니 편하겠다

예제 10–8

홍 : 클레스에서도 제네릭 타입을 두개를 활용해서 다양한 변수를 입력받을 수있네

송 : 그러면 생각해보니 굳이 제네릭타입을 하나 말고 생성할 때부터 변수 개수만큼
제네릭 타입을 생성하면 좋은거아니야?

홍 : 물론 그러면 되겠지만 그럼 최적화가 안되거나 꼭 같은타입을 입력해야할 경우 
오류가 발생하지 않을까? 모든지 적당하게 의도대로 사용하는게 좋은 코드같아	

4. vector 컨테이너
     가변 길이 배열을 구현한 제네릭 클래스

홍 : 개발자가 벡터의 길이에 대한 고민할 필요없이 활용할 수있어 좋은 클래스 같아

송 : 확실히 몰랐던 내용을 알게되니까 기존에 사용했던 방식보다 훨씬 좋은방법으로
코딩가능 할거같아 내가 했던방식은 너무 하드코딩이였어

5. iterator 사용
    반복자라고도 부름
 컨테이너의 원소를 가리키는 포인터

송 : vector  포인터를 활용하니  좀더 복잡해진거 같아

홍 : 하지만 복잡한 만큼 잘 활용하면 더 최적화된 코드가 될거같아.

map 컨테이너
    (‘키’, ‘값’)의 쌍을 원소로 저장하는 제네릭 컨테이너


송 : 키와 값으로 저장하니 이름이나 학번등 다양한 정보를 저장할때 좋은거같아

홍 : 학번 이름 말고도 검색하는 분야에서는 다 활용 가능하겠네

auto
    auto를 이용하여 쉬운 변수 선

송: 기존에 배웠던 제네릭 함수와 auto를 활용하면 범용성 넓은 코드를 작성할 수 있을거같아

홍: 나도 이제부터 배운 내용을 활용해서 코드를 한번 짜봐야겠어
